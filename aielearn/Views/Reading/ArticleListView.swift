//
//  ArticleListView.swift
//  aielearn
//
//  Created by AI Assistant
//

import SwiftUI

struct ArticleListView: View {
    @EnvironmentObject var userProfile: UserProfile
    @EnvironmentObject var articleManager: ArticleManager
    @State private var showingReadingView = false
    @State private var selectedArticle: Article?
    @State private var showingTopicPicker = false
    @State private var customTopic = ""
    
    var body: some View {
        NavigationView {
            ZStack {
                ScrollView {
                    VStack(spacing: 20) {
                        // Header with reading stats
                        ReadingStatsCard()
                        
                        // Generation controls
                        ArticleGenerationCard()
                        
                        // Error message
                        if let errorMessage = articleManager.errorMessage {
                            ErrorCard(message: errorMessage)
                        }
                        
                        // Articles list
                        ArticlesSection()
                    }
                    .padding()
                }
                .navigationTitle("Reading")
                .navigationBarTitleDisplayMode(.large)
                .toolbar {
                    ToolbarItem(placement: .navigationBarTrailing) {
                        Button(action: {
                            showingTopicPicker = true
                        }) {
                            Image(systemName: articleManager.isGenerating ? "hourglass" : "plus.circle.fill")
                                .font(.title2)
                        }
                        .disabled(articleManager.isGenerating)
                    }
                }
                .sheet(isPresented: $showingReadingView) {
                    if let article = selectedArticle {
                        ArticleReadingView(article: article)
                            .environmentObject(userProfile)
                            .environmentObject(articleManager)
                    }
                }
                .sheet(isPresented: $showingTopicPicker) {
                    TopicPickerSheet()
                }
                .onReceive(articleManager.$shouldAutoStartReading) { shouldShow in
                    if shouldShow, let article = articleManager.autoGeneratedArticle {
                        selectedArticle = article
                        showingReadingView = true
                        articleManager.resetAutoFlowState()
                    }
                }
            }
        }
    }
}

struct ReadingStatsCard: View {
    @EnvironmentObject var articleManager: ArticleManager
    
    var body: some View {
        VStack(spacing: 16) {
            HStack {
                Text("Reading Progress")
                    .font(.headline)
                    .fontWeight(.bold)
                Spacer()
                
                HStack(spacing: 4) {
                    Image(systemName: "book.fill")
                        .foregroundColor(.blue)
                    Text("\(articleManager.readingStats.currentReadingStreak)")
                        .font(.headline)
                        .fontWeight(.bold)
                }
            }
            
            HStack(spacing: 20) {
                StatItem(
                    icon: "book.closed.fill",
                    value: "\(articleManager.readingStats.totalArticlesRead)",
                    label: "Articles",
                    color: .blue
                )
                
                StatItem(
                    icon: "clock.fill",
                    value: articleManager.readingStats.formattedTotalReadingTime,
                    label: "Time",
                    color: .green
                )
                
                StatItem(
                    icon: "brain.head.profile",
                    value: String(format: "%.0f%%", articleManager.readingStats.averageComprehensionScore * 100),
                    label: "Comprehension",
                    color: .purple
                )
            }
        }
        .padding()
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color(.systemBackground))
                .shadow(color: .black.opacity(0.05), radius: 8, x: 0, y: 2)
        )
    }
}

struct ArticleGenerationCard: View {
    @EnvironmentObject var userProfile: UserProfile
    @EnvironmentObject var articleManager: ArticleManager
    @StateObject private var loadingManager = LoadingStateManager.shared
    
    var body: some View {
        DSLoadingCard(
            isLoading: articleManager.isGenerating,
            context: .dataSync
        ) {
            VStack(spacing: 16) {
                HStack {
                    VStack(alignment: .leading, spacing: 4) {
                        Text("Generate New Article")
                            .font(.headline)
                            .fontWeight(.bold)
                        
                        Text("Create a personalized article based on your learning level")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                    }
                    Spacer()
                    
                    DSButton(
                        "Generate",
                        icon: "plus.circle.fill",
                        style: .secondary,
                        isLoading: articleManager.isGenerating
                    ) {
                        articleManager.generateArticle(for: userProfile)
                    }
                }
                
                if articleManager.isGenerating {
                    DSStatusMessage(
                        type: .loading,
                        title: "Generating Article",
                        message: "Creating your personalized content..."
                    )
                }
            }
        }
    }
}

struct ArticlesSection: View {
    @EnvironmentObject var articleManager: ArticleManager
    @State private var selectedArticle: Article?
    @State private var showingReadingView = false
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                Text("Your Articles")
                    .font(.headline)
                    .fontWeight(.bold)
                Spacer()
                Text("\(articleManager.availableArticles.count)")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
            }
            
            if articleManager.availableArticles.isEmpty {
                EmptyArticlesView()
            } else {
                LazyVStack(spacing: 12) {
                    ForEach(articleManager.availableArticles) { article in
                        ArticleCard(article: article) {
                            selectedArticle = article
                            showingReadingView = true
                        }
                    }
                }
            }
        }
        .sheet(isPresented: $showingReadingView) {
            if let article = selectedArticle {
                ArticleReadingView(article: article)
                    .environmentObject(articleManager)
            }
        }
    }
}

struct ArticleCard: View {
    let article: Article
    let onTap: () -> Void
    @EnvironmentObject var articleManager: ArticleManager
    
    var body: some View {
        Button(action: onTap) {
            VStack(alignment: .leading, spacing: 12) {
                HStack {
                    VStack(alignment: .leading, spacing: 4) {
                        Text(article.title)
                            .font(.headline)
                            .foregroundColor(.primary)
                            .multilineTextAlignment(.leading)
                        
                        Text(article.summary)
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                            .lineLimit(2)
                    }
                    Spacer()
                    
                    VStack(spacing: 4) {
                        Image(systemName: "clock")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        Text("\(article.estimatedReadingTime)m")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                }
                
                HStack {
                    // Tags
                    HStack(spacing: 8) {
                        ForEach(article.tags.prefix(2), id: \.self) { tag in
                            Text(tag)
                                .font(.caption)
                                .padding(.horizontal, 8)
                                .padding(.vertical, 4)
                                .background(
                                    Capsule()
                                        .fill(Color.blue.opacity(0.1))
                                )
                                .foregroundColor(.blue)
                        }
                    }
                    
                    Spacer()
                    
                    // Reading status
                    HStack(spacing: 4) {
                        if articleManager.hasCompletedReading(for: article.id) {
                            Image(systemName: "checkmark.circle.fill")
                                .foregroundColor(.green)
                            Text("Completed")
                                .font(.caption)
                                .foregroundColor(.green)
                        } else {
                            Image(systemName: "book")
                                .foregroundColor(.blue)
                            Text("Read")
                                .font(.caption)
                                .foregroundColor(.blue)
                        }
                    }
                }
                
                HStack {
                    Text("\(article.wordCount) words")
                        .font(.caption)
                        .foregroundColor(.secondary)
                    
                    Spacer()
                    
                    Text(article.difficulty.rawValue)
                        .font(.caption)
                        .padding(.horizontal, 8)
                        .padding(.vertical, 2)
                        .background(
                            Capsule()
                                .fill(difficultyColor.opacity(0.1))
                        )
                        .foregroundColor(difficultyColor)
                }
            }
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(Color(.systemBackground))
                    .shadow(color: .black.opacity(0.05), radius: 4, x: 0, y: 2)
            )
        }
        .buttonStyle(PlainButtonStyle())
    }
    
    private var difficultyColor: Color {
        switch article.difficulty {
        case .beginner: return .green
        case .intermediate: return .orange
        case .advanced: return .red
        }
    }
}

struct EmptyArticlesView: View {
    var body: some View {
        VStack(spacing: 16) {
            Image(systemName: "book.closed")
                .font(.system(size: 48))
                .foregroundColor(.secondary)
            
            Text("No Articles Yet")
                .font(.headline)
                .foregroundColor(.primary)
            
            Text("Generate your first article to start reading and improving your English skills!")
                .font(.subheadline)
                .foregroundColor(.secondary)
                .multilineTextAlignment(.center)
        }
        .padding(.vertical, 40)
        .frame(maxWidth: .infinity)
    }
}

struct ErrorCard: View {
    let message: String
    
    var body: some View {
        HStack {
            Image(systemName: "exclamationmark.triangle.fill")
                .foregroundColor(.red)
            Text(message)
                .font(.subheadline)
                .foregroundColor(.red)
            Spacer()
        }
        .padding()
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(Color.red.opacity(0.1))
        )
    }
}

struct TopicPickerSheet: View {
    @EnvironmentObject var userProfile: UserProfile
    @EnvironmentObject var articleManager: ArticleManager
    @Environment(\.presentationMode) var presentationMode
    @State private var customTopic = ""
    
    var body: some View {
        NavigationView {
            VStack(spacing: 24) {
                Text("Choose Article Topic")
                    .font(.title2)
                    .fontWeight(.bold)
                    .padding(.top)
                
                VStack(spacing: 16) {
                    Button("Generate Based on My Preferences") {
                        articleManager.generateArticle(for: userProfile)
                        presentationMode.wrappedValue.dismiss()
                    }
                    .buttonStyle(PrimaryButtonStyle())
                    
                    Text("Or specify a custom topic:")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                    
                    TextField("Enter topic (e.g., 'Technology', 'Travel', 'Health')", text: $customTopic)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                    
                    Button("Generate Custom Article") {
                        if !customTopic.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {
                            articleManager.generateArticle(for: userProfile, specificTopic: customTopic)
                            presentationMode.wrappedValue.dismiss()
                        }
                    }
                    .buttonStyle(SecondaryButtonStyle())
                    .disabled(customTopic.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty)
                }
                .padding()
                
                Spacer()
            }
            .navigationTitle("New Article")
            .navigationBarTitleDisplayMode(.inline)
            .navigationBarItems(trailing: Button("Cancel") {
                presentationMode.wrappedValue.dismiss()
            })
        }
    }
}

// MARK: - Button Styles (defined in OnboardingView.swift)

#Preview {
    ArticleListView()
        .environmentObject(UserProfile())
        .environmentObject(ArticleManager())
} 