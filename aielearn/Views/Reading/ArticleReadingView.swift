//
//  ArticleReadingView.swift
//  aielearn
//
//  Created by AI Assistant
//

import SwiftUI

struct ArticleReadingView: View {
    let article: Article
    @EnvironmentObject var articleManager: ArticleManager
    @Environment(\.presentationMode) var presentationMode
    @ObservedObject private var speechService = SpeechService.shared
    
    @State private var readingSession: ArticleReadingSession?
    @State private var showingQuiz = false
    @State private var readingProgress: Double = 0.0
    @State private var hasScrolledToEnd = false
    @State private var showingCompletionAlert = false
    @State private var showingSpeechOptions = false
    @State private var questionsReady = false
    
    @StateObject private var loadingManager = LoadingStateManager.shared
    
    var body: some View {
        NavigationView {
            ZStack {
                ScrollView {
                    VStack(alignment: .leading, spacing: 20) {
                        // Article header
                        ArticleHeader(article: article)
                        
                        // Article content
                        ArticleContent(article: article, onScrollProgress: updateReadingProgress)
                        
                        // Action buttons
                        ActionButtons(
                            article: article,
                            speechService: speechService,
                            showingSpeechOptions: $showingSpeechOptions
                        )
                        
                        Spacer(minLength: 100)
                    }
                    .padding()
                }
                .coordinateSpace(name: "scrollView")
                .navigationTitle("Reading")
                .navigationBarTitleDisplayMode(.inline)
                .navigationBarItems(
                    leading: Button("Close") {
                        completeReading()
                        presentationMode.wrappedValue.dismiss()
                    },
                    trailing: progressIndicator
                )
                
                // Floating action button for quiz
                if readingProgress >= 1.0 {
                    VStack {
                        Spacer()
                        HStack {
                            Spacer()
                            DSButton(
                                loadingManager.isLoading(.quizGeneration) ? "Generating..." : "Take Quiz",
                                icon: loadingManager.isLoading(.quizGeneration) ? nil : "questionmark.circle.fill",
                                style: .primary,
                                isLoading: loadingManager.isLoading(.quizGeneration)
                            ) {
                                startQuiz()
                            }
                            .padding(.trailing, 20)
                            .padding(.bottom, 20)
                        }
                    }
                }
            }
        }
        .onAppear {
            startReadingSession()
            configureSpeechService()
            checkQuestionsAvailability()
        }
        .onDisappear {
            if readingProgress < 1.0 {
                completeReading()
            }
        }
        .sheet(isPresented: $showingQuiz) {
            ArticleQuizView(
                article: article,
                questions: articleManager.autoGeneratedQuestions
            )
            .environmentObject(articleManager)
        }
        .alert(isPresented: $showingCompletionAlert) {
            Alert(
                title: Text("Article Completed! 🎉"),
                message: Text("Great job reading the entire article! Ready to test your comprehension?"),
                primaryButton: .default(Text("Take Quiz")) {
                    startQuiz()
                },
                secondaryButton: .cancel(Text("Maybe Later"))
            )
        }
    }
    
    private var progressIndicator: some View {
        HStack(spacing: 4) {
            ZStack(alignment: .leading) {
                Capsule()
                    .fill(Color.gray.opacity(0.3))
                    .frame(width: 40, height: 4)
                
                Capsule()
                    .fill(Color.blue)
                    .frame(width: 40 * readingProgress, height: 4)
            }
            Text("\(Int(readingProgress * 100))%")
                .font(.caption)
                .foregroundColor(.secondary)
        }
    }
    
    private func startReadingSession() {
        readingSession = articleManager.startReadingSession(for: article)
    }
    
    private func updateReadingProgress(_ progress: Double) {
        readingProgress = progress
        
        if let session = readingSession {
            articleManager.updateReadingProgress(session: session, progress: progress)
        }
        
        // Show completion alert when user reaches the end for the first time
        if progress >= 1.0 && !hasScrolledToEnd {
            hasScrolledToEnd = true
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                showingCompletionAlert = true
            }
        }
    }
    
    private func completeReading() {
        if let session = readingSession {
            articleManager.completeReadingSession(session: session, progress: readingProgress)
        }
    }
    
    private func configureSpeechService() {
        // Configure the speech service with OpenAI service from environment
        if let openAIService = articleManager.configuredOpenAIService {
            speechService.setOpenAIService(openAIService)
        }
    }
    
    private func checkQuestionsAvailability() {
        // Check if questions are already available for this article
        questionsReady = !articleManager.autoGeneratedQuestions.isEmpty
    }
    
    private func startQuiz() {
        // Check if questions are already available
        if !articleManager.autoGeneratedQuestions.isEmpty {
            questionsReady = true
            showingQuiz = true
            return
        }
        
        // Generate questions for this article
        Task {
            await articleManager.generateQuestionsForArticle(article)
            
            await MainActor.run {
                if !articleManager.autoGeneratedQuestions.isEmpty {
                    questionsReady = true
                    showingQuiz = true
                } else {
                    // Show error if question generation failed
                    print("❌ Failed to generate questions for quiz")
                }
            }
        }
    }
}

struct ArticleHeader: View {
    let article: Article
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text(article.title)
                .font(.title)
                .fontWeight(.bold)
                .multilineTextAlignment(.leading)
            
            HStack {
                Label("\(article.estimatedReadingTime) min read", systemImage: "clock")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                
                Spacer()
                
                Text(article.difficulty.rawValue)
                    .font(.caption)
                    .padding(.horizontal, 8)
                    .padding(.vertical, 4)
                    .background(
                        Capsule()
                            .fill(difficultyColor.opacity(0.1))
                    )
                    .foregroundColor(difficultyColor)
            }
            
            if !article.tags.isEmpty {
                HStack {
                    ForEach(article.tags.prefix(3), id: \.self) { tag in
                        Text(tag)
                            .font(.caption)
                            .padding(.horizontal, 8)
                            .padding(.vertical, 4)
                            .background(
                                Capsule()
                                    .fill(Color.blue.opacity(0.1))
                            )
                            .foregroundColor(.blue)
                    }
                    Spacer()
                }
            }
            
            Divider()
        }
    }
    
    private var difficultyColor: Color {
        switch article.difficulty {
        case .beginner: return .green
        case .intermediate: return .orange
        case .advanced: return .red
        }
    }
}

struct ArticleContent: View {
    let article: Article
    let onScrollProgress: (Double) -> Void
    
    @State private var scrollOffset: CGFloat = 0
    @State private var contentHeight: CGFloat = 0
    
    var body: some View {
        Text(article.content)
            .font(.body)
            .lineSpacing(6)
            .multilineTextAlignment(.leading)
            .fixedSize(horizontal: false, vertical: true)
            .background(
                GeometryReader { geometry in
                    Color.clear
                        .onAppear {
                            contentHeight = geometry.size.height
                        }
                        .preference(key: ViewOffsetKey.self, value: geometry.frame(in: .named("scrollView")).minY)
                }
            )
            .onPreferenceChange(ViewOffsetKey.self) { offset in
                scrollOffset = offset
                updateScrollProgress()
            }
    }
    
    private func updateScrollProgress() {
        let screenHeight = UIScreen.main.bounds.height
        let readableHeight = screenHeight - 200 // Account for navigation and safe areas
        
        if contentHeight > readableHeight {
            let scrollableDistance = contentHeight - readableHeight
            let currentScroll = max(0, -scrollOffset)
            let progress = min(1.0, currentScroll / scrollableDistance)
            onScrollProgress(progress)
        } else {
            // Content fits on screen, mark as fully read
            onScrollProgress(1.0)
        }
    }
}

struct ActionButtons: View {
    let article: Article
    @ObservedObject var speechService: SpeechService
    @Binding var showingSpeechOptions: Bool
    
    var body: some View {
        VStack(spacing: 16) {
            Divider()
            
            HStack {
                Button(action: {
                    shareArticle()
                }) {
                    Label("Share", systemImage: "square.and.arrow.up")
                        .foregroundColor(.blue)
                }
                
                Spacer()
                
                Button(action: {
                    // Bookmark functionality - future feature
                }) {
                    Label("Bookmark", systemImage: "bookmark")
                        .foregroundColor(.blue)
                }
                
                Spacer()
                
                Button(action: {
                    showingSpeechOptions.toggle()
                }) {
                    Label("Listen", systemImage: speechService.speechControlIcon)
                        .foregroundColor(speechService.speechControlColor)
                }
            }
            .padding()
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(Color(.systemGray6))
            )
            
            // Speech Options Panel
            if showingSpeechOptions {
                SpeechOptionsPanel(article: article, speechService: speechService)
                    .transition(.opacity.combined(with: .scale))
            }
        }
        .animation(.easeInOut(duration: 0.3), value: showingSpeechOptions)
    }
    
    private func shareArticle() {
        let shareText = "\(article.title)\n\n\(article.content)"
        let activityVC = UIActivityViewController(activityItems: [shareText], applicationActivities: nil)
        
        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
           let window = windowScene.windows.first {
            window.rootViewController?.present(activityVC, animated: true)
        }
    }
}

struct SpeechOptionsPanel: View {
    let article: Article
    @ObservedObject var speechService: SpeechService
    
    var body: some View {
        VStack(spacing: 16) {
            Text("Listen to Article")
                .font(.headline)
                .fontWeight(.semibold)
            
            HStack(spacing: 20) {
                // Built-in Voice Option
                VStack(spacing: 8) {
                    Button(action: {
                        if speechService.isSpeaking && !speechService.isPaused {
                            speechService.pauseSpeaking()
                        } else if speechService.isPaused {
                            speechService.resumeSpeaking()
                        } else {
                            speechService.speakArticle(article)
                        }
                    }) {
                        VStack(spacing: 4) {
                            Image(systemName: speechService.isSpeaking && !speechService.isPaused ? "pause.circle.fill" : "play.circle.fill")
                                .font(.title)
                                .foregroundColor(.blue)
                            
                            Text("Built-in Voice")
                                .font(.caption)
                                .fontWeight(.medium)
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(
                            RoundedRectangle(cornerRadius: 12)
                                .fill(Color.blue.opacity(0.1))
                                .overlay(
                                    RoundedRectangle(cornerRadius: 12)
                                        .stroke(Color.blue.opacity(0.3), lineWidth: 1)
                                )
                        )
                    }
                    
                    Text("Natural iOS voice")
                        .font(.caption2)
                        .foregroundColor(.secondary)
                }
                
                // AI Voice Option
                VStack(spacing: 8) {
                    Button(action: {
                        if speechService.isSpeaking {
                            speechService.stopSpeaking()
                        } else {
                            speechService.speakArticleWithOpenAI(article, voice: speechService.selectedOpenAIVoice)
                        }
                    }) {
                        VStack(spacing: 4) {
                            Image(systemName: speechService.isSpeaking ? "stop.circle.fill" : "waveform.circle.fill")
                                .font(.title)
                                .foregroundColor(.purple)
                            
                            Text("AI Voice")
                                .font(.caption)
                                .fontWeight(.medium)
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(
                            RoundedRectangle(cornerRadius: 12)
                                .fill(Color.purple.opacity(0.1))
                                .overlay(
                                    RoundedRectangle(cornerRadius: 12)
                                        .stroke(Color.purple.opacity(0.3), lineWidth: 1)
                                )
                        )
                    }
                    
                    Text("OpenAI \(speechService.selectedOpenAIVoice.displayName)")
                        .font(.caption2)
                        .foregroundColor(.secondary)
                }
            }
            
            // Voice Settings
            if speechService.isSpeaking {
                VStack(spacing: 12) {
                    HStack {
                        Text("Now Playing:")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        Spacer()
                        Button("Stop") {
                            speechService.stopSpeaking()
                        }
                        .font(.caption)
                        .foregroundColor(.red)
                    }
                    
                    Text(article.title)
                        .font(.caption)
                        .fontWeight(.medium)
                        .lineLimit(1)
                        .frame(maxWidth: .infinity, alignment: .leading)
                }
                .padding(12)
                .background(
                    RoundedRectangle(cornerRadius: 8)
                        .fill(Color(.systemGray6))
                )
            }
            
            // Voice Selection for OpenAI
            VStack(alignment: .leading, spacing: 8) {
                Text("AI Voice Selection")
                    .font(.caption)
                    .fontWeight(.medium)
                    .foregroundColor(.secondary)
                
                Picker("AI Voice", selection: $speechService.selectedOpenAIVoice) {
                    ForEach(SpeechService.OpenAIVoice.allCases, id: \.self) { voice in
                        Text(voice.displayName).tag(voice)
                    }
                }
                .pickerStyle(.menu)
                .frame(maxWidth: .infinity, alignment: .leading)
            }
        }
        .padding()
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color(.systemBackground))
                .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)
        )
        .padding(.horizontal)
    }
}

// MARK: - Helper Views and Keys
struct ViewOffsetKey: PreferenceKey {
    typealias Value = CGFloat
    static var defaultValue = CGFloat.zero
    static func reduce(value: inout Value, nextValue: () -> Value) {
        value += nextValue()
    }
}

#Preview {
    ArticleReadingView(
        article: Article(
            title: "Sample Article",
            content: "This is a sample article content that would be much longer in a real scenario. It demonstrates how the reading view would look and function with proper content.",
            topic: .general,
            difficulty: .intermediate,
            estimatedReadingTime: 3,
            wordCount: 250,
            tags: ["sample", "demo"],
            summary: "A sample article for demonstration purposes."
        )
    )
    .environmentObject(ArticleManager())
} 