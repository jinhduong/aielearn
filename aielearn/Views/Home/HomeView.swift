//
//  HomeView.swift
//  aielearn
//
//  Created by AI Assistant
//

import SwiftUI
import Combine

struct HomeView: View {
    @EnvironmentObject var userProfile: UserProfile
    @EnvironmentObject var quizManager: QuizManager
    @State private var showingQuizSheet = false
    @State private var selectedQuiz: Quiz?
    
    var body: some View {
        NavigationView {
            ZStack {
                ScrollView {
                    VStack(spacing: 24) {
                        // Header with greeting
                        HeaderView()
                        
                        // Daily streak and stats
                        StatsCardView()
                        
                        // Daily challenge
                        DailyChallengeCard()
                        
                        // Quick actions
                        QuickActionsSection()
                        
                        // Quiz generation status
                        if let errorMessage = quizManager.errorMessage {
                            QuizGenerationStatusCard(message: errorMessage, isError: true)
                        }
                        
                        // Recent quizzes
                        RecentQuizzesSection()
                        
                        // Learning tips
                        LearningTipsCard()
                    }
                    .padding()
                }
                .navigationTitle("AIELearn")
                .navigationBarTitleDisplayMode(.large)
                .toolbar {
                    ToolbarItem(placement: .navigationBarTrailing) {
                        Button(action: {
                            quizManager.generateQuiz(for: userProfile)
                        }) {
                            Image(systemName: quizManager.isGenerating ? "hourglass" : "plus.circle.fill")
                                .font(.title2)
                        }
                        .disabled(quizManager.isGenerating)
                    }
                }
                .sheet(isPresented: $showingQuizSheet) {
                    if let quiz = selectedQuiz {
                        QuizView(quiz: quiz)
                            .environmentObject(userProfile)
                            .environmentObject(quizManager)
                    }
                }
                .onReceive(quizManager.$shouldAutoStartQuiz) { shouldShow in
                    if shouldShow, let quiz = quizManager.autoGeneratedQuiz {
                        selectedQuiz = quiz
                        showingQuizSheet = true
                        quizManager.resetAutoFlowState()
                    }
                }
                
                // ENHANCED: Loading is now handled by GlobalLoadingOverlay
                // No need for individual loading indicators
            }
        }
    }
}

struct HeaderView: View {
    @EnvironmentObject var userProfile: UserProfile
    
    var body: some View {
        HStack {
            VStack(alignment: .leading, spacing: 4) {
                Text(greeting)
                    .font(.title2)
                    .fontWeight(.medium)
                
                Text("Ready to learn English today?")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
            }
            
            Spacer()
            
            // Profile level badge
            HStack(spacing: 8) {
                Image(systemName: "star.fill")
                    .foregroundColor(.yellow)
                Text("\(userProfile.totalPoints)")
                    .font(.headline)
                    .fontWeight(.bold)
            }
            .padding(.horizontal, 12)
            .padding(.vertical, 6)
            .background(
                Capsule()
                    .fill(Color.yellow.opacity(0.1))
            )
        }
    }
    
    private var greeting: String {
        let hour = Calendar.current.component(.hour, from: Date())
        switch hour {
        case 0..<12: return "Good Morning! 🌅"
        case 12..<17: return "Good Afternoon! ☀️"
        default: return "Good Evening! 🌙"
        }
    }
}

struct StatsCardView: View {
    @EnvironmentObject var userProfile: UserProfile
    
    var body: some View {
        VStack(spacing: 16) {
            HStack {
                Text("Your Progress")
                    .font(.headline)
                    .fontWeight(.bold)
                Spacer()
                
                HStack(spacing: 4) {
                    Image(systemName: "flame.fill")
                        .foregroundColor(.orange)
                    Text("\(userProfile.currentStreak)")
                        .font(.headline)
                        .fontWeight(.bold)
                }
            }
            
            // First row - Quiz stats
            HStack(spacing: 20) {
                StatItem(
                    icon: "checkmark.circle.fill",
                    value: "\(userProfile.totalQuizzesCompleted)",
                    label: "Quizzes",
                    color: .green
                )
                
                StatItem(
                    icon: "target",
                    value: String(format: "%.0f%%", userProfile.accuracyPercentage),
                    label: "Accuracy",
                    color: .blue
                )
                
                StatItem(
                    icon: "trophy.fill",
                    value: "\(userProfile.badges.count)",
                    label: "Badges",
                    color: .purple
                )
            }
            
            // Second row - Reading stats (NEW)
            HStack(spacing: 20) {
                StatItem(
                    icon: "book.pages.fill",
                    value: "\(userProfile.totalArticlesRead)",
                    label: "Articles",
                    color: .cyan
                )
                
                StatItem(
                    icon: "clock.fill",
                    value: formatReadingTime(userProfile.totalReadingTime),
                    label: "Reading",
                    color: .orange
                )
                
                StatItem(
                    icon: "brain.head.profile",
                    value: String(format: "%.0f%%", userProfile.averageReadingComprehension * 100),
                    label: "Comprehension",
                    color: .indigo
                )
            }
        }
        .padding()
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color(.systemBackground))
                .shadow(color: .black.opacity(0.05), radius: 8, x: 0, y: 2)
        )
    }
    
    private func formatReadingTime(_ timeInterval: TimeInterval) -> String {
        let hours = Int(timeInterval) / 3600
        let minutes = Int(timeInterval.truncatingRemainder(dividingBy: 3600)) / 60
        
        if hours > 0 {
            return "\(hours)h"
        } else if minutes > 0 {
            return "\(minutes)m"
        } else {
            return "0m"
        }
    }
}

struct StatItem: View {
    let icon: String
    let value: String
    let label: String
    let color: Color
    
    var body: some View {
        VStack(spacing: 8) {
            Image(systemName: icon)
                .font(.title2)
                .foregroundColor(color)
            
            Text(value)
                .font(.title3)
                .fontWeight(.bold)
            
            Text(label)
                .font(.caption)
                .foregroundColor(.secondary)
        }
        .frame(maxWidth: .infinity)
    }
}

struct DailyChallengeCard: View {
    @EnvironmentObject var userProfile: UserProfile
    @EnvironmentObject var quizManager: QuizManager
    @StateObject private var loadingManager = LoadingStateManager.shared
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                VStack(alignment: .leading, spacing: 4) {
                    Text("Daily Challenge")
                        .font(.headline)
                        .fontWeight(.bold)
                    
                    Text("Complete today's challenge to maintain your streak!")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                
                Spacer()
                
                if loadingManager.isLoading(.quizGeneration) {
                    ModernLoadingIndicator.inlineRipple(
                        size: 24,
                        color: DesignSystem.Colors.Loading.quiz
                    )
                } else {
                    Image(systemName: "calendar.badge.exclamationmark")
                        .font(.title2)
                        .foregroundColor(.orange)
                }
            }
            
            DSButton(
                "Start Challenge",
                icon: loadingManager.isLoading(.quizGeneration) ? nil : "arrow.right.circle.fill",
                style: .primary,
                isLoading: loadingManager.isLoading(.quizGeneration)
            ) {
                if !loadingManager.isLoading(.quizGeneration) {
                    quizManager.generateDailyChallengeQuiz(for: userProfile)
                }
            }
        }
        .padding()
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.orange.opacity(0.1))
                .overlay(
                    RoundedRectangle(cornerRadius: 16)
                        .stroke(Color.orange.opacity(0.3), lineWidth: 1)
                )
        )
    }
}

struct QuickActionsSection: View {
    @EnvironmentObject var userProfile: UserProfile
    @EnvironmentObject var quizManager: QuizManager
    @EnvironmentObject var mistakeManager: MistakeManager
    @EnvironmentObject var articleManager: ArticleManager
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("Quick Actions")
                .font(.headline)
                .fontWeight(.bold)
            
            // ENHANCED: Add mistake-based quiz option at the top if mistakes available
            if mistakeManager.pendingReviewCount > 0 {
                QuickActionCard(
                    icon: "arrow.clockwise.circle.fill",
                    title: "Review Mistakes",
                    subtitle: "\(mistakeManager.pendingReviewCount) mistakes to review",
                    color: .orange,
                    isLoading: false
                ) {
                    generateMistakeBasedQuiz()
                }
                .padding(.bottom, 8)
            }
            
            LazyVGrid(columns: [
                GridItem(.flexible()),
                GridItem(.flexible())
            ], spacing: 16) {
                QuickActionCard(
                    icon: quizManager.isGenerating ? "hourglass" : "shuffle",
                    title: quizManager.isGenerating ? "Generating..." : "Random Quiz", 
                    subtitle: quizManager.isGenerating ? "Please wait" : "Surprise me!",
                    color: .blue,
                    isLoading: quizManager.isGenerating
                ) {
                    if !quizManager.isGenerating {
                        quizManager.generateRandomQuiz(for: userProfile)
                    }
                }
                
                QuickActionCard(
                    icon: "waveform.circle",
                    title: "Vocal Quiz",
                    subtitle: "Listen & speak",
                    color: .green,
                    isLoading: quizManager.isGenerating
                ) {
                    if !quizManager.isGenerating {
                        quizManager.generateVocalQuiz(for: userProfile)
                    }
                }
                
                QuickActionCard(
                    icon: "textformat.123",
                    title: "Grammar Quiz",
                    subtitle: "Perfect your rules",
                    color: .purple,
                    isLoading: quizManager.isGenerating
                ) {
                    if !quizManager.isGenerating {
                        quizManager.generateGrammarQuiz(for: userProfile)
                    }
                }
                
                QuickActionCard(
                    icon: "mic.badge.plus",
                    title: "Speaking Quiz",
                    subtitle: "Pronunciation focus", 
                    color: .red,
                    isLoading: quizManager.isGenerating
                ) {
                    if !quizManager.isGenerating {
                        quizManager.generateSpeakingQuiz(for: userProfile)
                    }
                }
                
                QuickActionCard(
                    icon: "bubble.left.and.bubble.right",
                    title: "Conversation Quiz",
                    subtitle: "Learn through dialogue", 
                    color: .mint,
                    isLoading: quizManager.isGenerating
                ) {
                    if !quizManager.isGenerating {
                        quizManager.generateConversationQuiz(for: userProfile)
                    }
                }
                
                QuickActionCard(
                    icon: articleManager.isGenerating ? "hourglass" : "book.pages",
                    title: articleManager.isGenerating ? "Creating..." : "New Article",
                    subtitle: articleManager.isGenerating ? "Please wait" : "Read & learn",
                    color: .cyan,
                    isLoading: articleManager.isGenerating
                ) {
                    if !articleManager.isGenerating {
                        articleManager.generateArticle(for: userProfile)
                    }
                }
            }
        }
    }
    
    // ENHANCED: Generate mistake-based quiz using simple loading state
    private func generateMistakeBasedQuiz() {
        let pendingMistakes = mistakeManager.getMistakesForReview()
        quizManager.generateMistakeBasedQuiz(for: userProfile, mistakes: pendingMistakes)
    }
}

struct QuickActionCard: View {
    let icon: String
    let title: String
    let subtitle: String
    let color: Color
    let isLoading: Bool
    let action: () -> Void
    
    init(icon: String, title: String, subtitle: String, color: Color, isLoading: Bool = false, action: @escaping () -> Void) {
        self.icon = icon
        self.title = title
        self.subtitle = subtitle
        self.color = color
        self.isLoading = isLoading
        self.action = action
    }
    
    var body: some View {
        Button(action: action) {
            VStack(spacing: 12) {
                if isLoading {
                    ModernLoadingIndicator.inlineSpringDots(
                        size: 24,
                        color: color
                    )
                } else {
                    Image(systemName: icon)
                        .font(.title)
                        .foregroundColor(color)
                }
                
                VStack(spacing: 4) {
                    if isLoading {
                        SkeletonLoader.text(width: 80)
                        SkeletonLoader.text(width: 60)
                    } else {
                        Text(title)
                            .font(.headline)
                            .fontWeight(.semibold)
                        
                        Text(subtitle)
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                }
            }
            .frame(height: 100)
            .frame(maxWidth: .infinity)
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(color.opacity(0.1))
                    .overlay(
                        RoundedRectangle(cornerRadius: 12)
                            .stroke(color.opacity(0.3), lineWidth: 1)
                    )
            )
        }
        .buttonStyle(PlainButtonStyle())
        .disabled(isLoading)
        .animation(DesignSystem.Animations.Loading.stateChange, value: isLoading)
    }
}

struct RecentQuizzesSection: View {
    @EnvironmentObject var quizManager: QuizManager
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                Text("Recent Results")
                    .font(.headline)
                    .fontWeight(.bold)
                
                Spacer()
                
                NavigationLink("View All") {
                    // Navigate to full quiz history
                }
                .font(.caption)
                .foregroundColor(.blue)
            }
            
            if quizManager.quizHistory.isEmpty {
                EmptyStateView(
                    icon: "questionmark.circle",
                    title: "No quizzes yet",
                    subtitle: "Complete your first quiz to see results here"
                )
            } else {
                LazyVStack(spacing: 12) {
                    ForEach(quizManager.getRecentPerformance().prefix(3)) { result in
                        RecentQuizRow(result: result)
                    }
                }
            }
        }
    }
}

struct RecentQuizRow: View {
    let result: QuizResult
    
    var body: some View {
        HStack {
            VStack(alignment: .leading, spacing: 4) {
                Text("Quiz #\(result.quizId.uuidString.prefix(8))")
                    .font(.headline)
                    .fontWeight(.medium)
                
                Text(result.completedAt, style: .date)
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Spacer()
            
            VStack(alignment: .trailing, spacing: 4) {
                Text("\(result.score)/\(result.totalQuestions)")
                    .font(.headline)
                    .fontWeight(.bold)
                    .foregroundColor(result.percentage >= 80 ? .green : result.percentage >= 60 ? .orange : .red)
                
                Text("\(Int(result.percentage))%")
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
        }
        .padding()
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(Color(.systemGray6))
        )
    }
}

struct QuizGenerationStatusCard: View {
    let message: String
    let isError: Bool
    
    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Image(systemName: isError ? "exclamationmark.triangle.fill" : "info.circle.fill")
                    .foregroundColor(isError ? .orange : .blue)
                Text(isError ? "Quiz Generation" : "Info")
                    .font(.headline)
                    .fontWeight(.bold)
            }
            
            Text(message)
                .font(.body)
                .multilineTextAlignment(.leading)
        }
        .padding()
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill((isError ? Color.orange : Color.blue).opacity(0.1))
                .overlay(
                    RoundedRectangle(cornerRadius: 16)
                        .stroke((isError ? Color.orange : Color.blue).opacity(0.3), lineWidth: 1)
                )
        )
    }
}

struct LearningTipsCard: View {
    private let tips = [
        "Try to practice a little bit every day to build a strong habit.",
        "Don't be afraid to make mistakes - they're part of learning!",
        "Use new vocabulary in sentences to remember them better.",
        "Set small, achievable goals to stay motivated.",
        "Review previous quiz results to identify areas for improvement."
    ]
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                Image(systemName: "lightbulb.fill")
                    .foregroundColor(.yellow)
                Text("Learning Tip")
                    .font(.headline)
                    .fontWeight(.bold)
            }
            
            Text(tips.randomElement() ?? tips[0])
                .font(.body)
                .multilineTextAlignment(.leading)
        }
        .padding()
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color.yellow.opacity(0.1))
                .overlay(
                    RoundedRectangle(cornerRadius: 16)
                        .stroke(Color.yellow.opacity(0.3), lineWidth: 1)
                )
        )
    }
}

struct EmptyStateView: View {
    let icon: String
    let title: String
    let subtitle: String
    
    var body: some View {
        VStack(spacing: 16) {
            Image(systemName: icon)
                .font(.system(size: 48))
                .foregroundColor(.gray)
            
            VStack(spacing: 8) {
                Text(title)
                    .font(.headline)
                    .fontWeight(.medium)
                
                Text(subtitle)
                    .font(.body)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
            }
        }
        .padding()
        .frame(maxWidth: .infinity)
    }
}

#Preview {
    HomeView()
        .environmentObject(UserProfile())
        .environmentObject(QuizManager())
} 